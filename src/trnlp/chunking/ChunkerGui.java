package trnlp.chunking;

import com.google.common.base.Joiner;
import trnlp.apps.TurkishMorphology;
import trnlp.apps.TurkishSentenceTokenizer;
import zemberek3.parser.morphology.SentenceMorphParse;

import java.io.File;
import java.io.IOException;
import java.util.List;

public class ChunkerGui {

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {

        //final Chunker chunker = new TurkishChunker(new File("src/tr/models/chunk-model-nopunct.ser"));
        final Chunker chunker = new CrfPlusPlusBasedChunker(new File("crfplusplus/cemil_model"));

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, e);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new NewJFrame(chunker, false).setVisible(true);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
    }
}


class NewJFrame extends javax.swing.JFrame {

    Chunker chunker;
    TurkishSentenceTokenizer tokenizer = new TurkishSentenceTokenizer();
    TurkishMorphology morphology;
    boolean eliminatePunctuations = false;

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame(TurkishChunker chunker) throws IOException {
        initComponents();
        this.chunker = chunker;
        this.morphology = new TurkishMorphology();
    }


    public NewJFrame(Chunker chunker, boolean eliminatePunctuations) throws IOException {
        initComponents();
        this.chunker = chunker;
        this.morphology = new TurkishMorphology();
        this.eliminatePunctuations = eliminatePunctuations;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel1.setText("Cümle:");

        jButton1.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jButton1.setText("Çözümle");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel2.setText("?");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButton1)
                                                .addContainerGap())))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton1))
                                .addGap(30, 30, 30)
                                .addComponent(jLabel2)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        String input = jTextField1.getText();
        if (eliminatePunctuations)
            input = ChunkerFeatureExtractor.eliminatePunctuations(input);

        String tokenized = tokenizer.getTokensContentsAsString(input);
        List<String> tokenList = tokenizer.tokenizeAsStrings(input);
        SentenceMorphParse parse = morphology.parseSentence(tokenized);
        for (SentenceMorphParse.Entry entry : parse) {
            System.out.println(entry.parses);
        }
        SentenceMorphParse disambiguated = morphology.parseAndDisambiguateSentence(tokenized);
        for (SentenceMorphParse.Entry entry : disambiguated) {
            System.out.println(entry.parses);
        }

        System.out.println(chunker.getChunks(tokenList, disambiguated));
        jLabel2.setText(getTurkish(chunker.getChunks(tokenList, disambiguated)));
    }

    String getTurkish(List<Chunk> chunks) {
        StringBuilder builder = new StringBuilder();
        int i = 0;
        for (Chunk chunk : chunks) {
            String trType = "";
            switch (chunk.type) {
                case ADJUNCT:
                    trType = "TÜMLEÇ";
                    break;
                case VERB:
                    trType = "YÜKLEM";
                    break;
                case SUBJECT:
                    trType = "ÖZNE";
                    break;
                case OBJECT:
                    trType = "NESNE";
                    break;
            }
            builder.append(Joiner.on(" ").join(chunk.words)).append(" [");
            builder.append(trType).append("]");
            if (i < chunks.size() - 1)
                builder.append(" / ");
            i++;
        }
        return builder.toString();

    }


    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration
}
